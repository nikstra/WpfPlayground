<Window x:Class="DesignModeData.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
        xmlns:local="clr-namespace:DesignModeData"
        xmlns:comment="Namespace for comments. Make sure it is added to mc:Ignorable."
        mc:Ignorable="d comment"
        
        comment:DataContext1="An example of using DesignInstance to create an instance of the view model."
        comment:DataContext2="{d:DesignInstance Type=local:MainWindowDesignModel, IsDesignTimeCreatable=True}"

        comment:DataContext3="An example of using a static property to create an instance of the view model."
        comment:DataContext4="{x:Static local:MainWindowDesignModel.CreateInstance}"
        
        comment:DataContext5="Using a xaml file to create an instance of the view model."
        d:DataContext="{d:DesignData Source=MainWindowDesignModel.xaml}"
        Title="MainWindow" Height="450" Width="800">
    
    <Window.DataContext>
        <local:MainWindowViewModel />
    </Window.DataContext>
 
    <!--
    The comment namespace defined above is taken from https://galasoft.ch/posts/2010/02/quick-tip-commenting-out-properties-in-xaml/
    and enables inline "comments" in tags. Since attribute names cannot be duplicated i've added a single digit suffix.
    Some more thaught is necessary before using the comment namespace in production code. First it is a non-standard way of using
    a namespace and second, there may be unwanted side effects. Anyway, it is a neat trick to add inline comments in demo code.
    
    Two XAML ways of creating design time data:
    d:DataContext="{d:DesignInstance Type=local:MainWindowDesignModel, IsDesignTimeCreatable=True}"
    d:DataContext="{d:DesignData Source=MainWindowDesignModel.xaml}"
        
    An alternate way to assign the design time DataContext. Requires a static property that returns an instance of the model.
    d:DataContext="{x:Static local:MainWindowDesignModel.CreateInstance}"
    -->
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        
        <ListBox
            Grid.Column="0"
            ItemsSource="{Binding People, UpdateSourceTrigger=PropertyChanged}"
            />

        <!-- Using a DataTrigger to hide the TextBlock when not in design mode. -->
        <TextBlock
            x:Name="designOnlyTextBlock"
            Grid.Column="1"
            Text="Only visible in design mode.">

            <TextBlock.Style>
                <Style TargetType="{x:Type TextBlock}">
                    <Setter Property="Visibility" Value="Hidden"/>
                    <Style.Triggers>
                        <DataTrigger
                            Binding="{
                                Binding RelativeSource={RelativeSource Self}, 
                                Path=(componentModel:DesignerProperties.IsInDesignMode)
                            }"
                            Value="True">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TextBlock.Style>
        </TextBlock>

        <local:MyUserControl Grid.Column="2" />
    </Grid>
    
    <!-- Here is a way to use the comment namespace to comment out a whole block. -->
    <comment:Grid>
        <TextBlock Text="Hello World!" />
    </comment:Grid>
</Window>
